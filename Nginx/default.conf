# React frontend
upstream app {
    least_conn;  # Use least_conn algorithm
    server app:3003 max_fails=1 fail_timeout=30s;
    server app:3004 max_fails=1 fail_timeout=30s;
    server app:3005 max_fails=1 fail_timeout=30s;
}

# Nodejs Backend
upstream api {
    least_conn;  # Use least_conn algorithm
    server api:8003 max_fails=1 fail_timeout=30s;
    server api:8004 max_fails=1 fail_timeout=30s;
    server api:8005 max_fails=1 fail_timeout=30s;
}

# Logging
error_log  /var/log/nginx/error.log warn;
access_log /var/log/nginx/access.log;

# Nginx Serve http redirect to https
server {
    listen 3003;
    listen [::]:3003;

    server_name 192.168.12.209;

    return 302 https://$server_name:81$request_uri;
}

# Nginx HTTPS server
server {
    listen      81 ssl;
    listen      [::]:81 ssl;

    ssl_certificate     /etc/nginx/192.168.12.209.crt;
    ssl_certificate_key /etc/nginx/192.168.12.209.key;

    # Strong SSL Ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    # Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # IP of local host serving content
    server_name 192.168.12.209;

    # Timeouts
    proxy_connect_timeout  600s;
    proxy_send_timeout  600s;
    proxy_read_timeout  600s;

    # Deny Unknown Hosts
    if ($host !~* ^(192.168.12.209)$ ) {
        return 444;
    }

    # Enable All Common HTTP Methods
    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|PATCH)$ ) {
        return 405;
    }

    location / {
        proxy_pass http://app;
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /sockjs-node {
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass https://api;
        proxy_ssl_verify off;
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
